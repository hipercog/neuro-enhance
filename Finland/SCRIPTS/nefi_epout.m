%% Configure pipe to perform final bad epoch detection and grand avg export
function [Cfg, out] = nefi_epout(Cfg)

    %%%%%%%% Define hierarchy %%%%%%%%
    Cfg.id = 'epout';
    Cfg.srcid= {'pipe1#pipe2A#pipe3A#1_chan_corr_vari'...
                'pipe1#pipe2A#pipe3B#1_chan_corr_maha'...
                'pipe1#pipe2B#pipe3A#1_chan_corr_vari'...
                'pipe1#pipe2B#pipe3B#1_chan_corr_maha'...
                'pipe1#pipe2C#pipe3A#1_chan_corr_vari'...
                'pipe1#pipe2C#pipe3B#1_chan_corr_maha'};
    if isfield(Cfg, 'pipe_src')
        idx = Cfg.pipe_src{ismember(Cfg.pipe_src(:,1), mfilename), 2};
        Cfg.srcid = Cfg.srcid(idx);
    end

    %%%%%%%% Define pipeline %%%%%%%%
    i = 1; %next stepSet
    stepSet(i).funH = { @CTAP_epoch_data,...
                        @CTAP_detect_bad_epochs,...
                        @CTAP_reject_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data,...
                        @CTAP_export_data };
    stepSet(i).id = [num2str(i) '_epoch_export'];

    out.epoch_data = struct(...
        'method', 'epoch',...
        'timelim', [-100 500],...
        'evtype'...
            , {{'dur' 'freq1' 'freq2' 'gap' 'int' 'loc1' 'loc2' 'novel' 'stand'}});
    
    out.detect_bad_epochs = struct(...
        'method', 'eegthresh',...
        'uV_thresh', [-120 120]);

    out.export_data = struct(...
        'type', 'mul',...
        'outdir', fullfile('exportRoot', 'MUL_EXPORT'),...
        'locking_event'...
            , {'dur' 'freq1' 'freq2' 'gap' 'int' 'loc1' 'loc2' 'novel' 'stand'});


    %%%%%%%% Store to Cfg %%%%%%%%
    Cfg.pipe.stepSets = stepSet;
    Cfg.pipe.runSets = {stepSet(:).id};
end